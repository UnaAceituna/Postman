{
	"info": {
		"_postman_id": "fb2e6b67-99c3-46fb-9820-42c7d41f952d",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21227921"
	},
	"item": [
		{
			"name": "POST_user_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json()\r",
							"//console.log(jsonData)\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"//Первый тест для себя оставила, для понимания различий между ними :)\r",
							"\r",
							"//pm.test(\"Name_request\", function () {\r",
							"    //pm.expect(JSON.stringify(jsonData.name)).to.include(\"ane\");\r",
							"//});\r",
							"pm.test(\"Name_is_Jane\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Jane\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age_request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"43\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary_request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = request.data\r",
							"//console.log(req_Data)\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    let salaryJane = req.salary\r",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(salaryJane);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let req_salary = req.salary\r",
							"let req_salary_1_5 = req_salary*4\r",
							"\r",
							"pm.test(\"TestSalary*4\", function () {\r",
							"    pm.expect(req_salary_1_5).to.eql(req_salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Jane",
							"type": "text"
						},
						{
							"key": "age",
							"value": "43",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"const respData = pm.response.json()\r",
							"//console.log(respData)\r",
							"\r",
							"//4. Спарсить request.\r",
							"const reqData = pm.request.url.query.toObject()\r",
							"//console.log(reqData)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is\", function () {\r",
							"    let req_name = reqData.name\r",
							"    pm.expect(respData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is\", function () {\r",
							"    let req_age = reqData.age\r",
							"    pm.expect(respData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is\", function () {\r",
							"    let salaryD = reqData.salary\r",
							"    pm.expect(JSON.stringify(respData.salary)).to.eql(salaryD);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(respData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"//pm.expect(respData.hasOwnProperty(\"name\")).to.eql(true)\r",
							"pm.test(\"Dog_has_name\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_has_age\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Daenerys&age=46&salary=4500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Daenerys"
						},
						{
							"key": "age",
							"value": "46"
						},
						{
							"key": "salary",
							"value": "4500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const resp4Data = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"const req4Data = pm.request.url.query.toObject()\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Jhon Snow has name\", function () {\r",
							"    pm.expect(req4Data.name).to.eql(resp4Data.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age_req = req4Data.age\r",
							"pm.test(\"Jhon Snow has age\", function () {\r",
							"    pm.expect(req4Data.age).to.eql(age_req);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log('salary is '+ resp4Data.salary[0])\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(('response salary is ') + resp4Data.salary[0])\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp4Data.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp4Data.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp4Data.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"const salary_req = req4Data.salary\r",
							"\r",
							"pm.test(\"Salary is 500\", function () {\r",
							"    pm.expect(JSON.stringify(resp4Data.salary[0])).to.eql(salary_req);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary is 1000\", function () {\r",
							"    let salary2 = salary_req*2\r",
							"    pm.expect(salary2).to.eql(salary_req*2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary is 1500\", function () {\r",
							"    let salary2 = salary_req*3\r",
							"    pm.expect(salary2).to.eql(salary_req*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"John_Snow\");\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"34\");\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", 2000);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=John_Snow&age=34&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "John_Snow"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"const resp2data = pm.response.json()\r",
							"//console.log(resp2data)\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req2data = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start\", function () {\r",
							"    pm.expect(resp2data).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Start6\", function () {\r",
							"    pm.expect(resp2data).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Start12\", function () {\r",
							"    pm.expect(resp2data).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Start 1.5 year\", function () {\r",
							"    pm.expect(resp2data).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Start 3.5_years\", function () {\r",
							"    pm.expect(resp2data).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person\", function () {\r",
							"    pm.expect(resp2data).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"const salaryQA = req2data.salary;\r",
							"pm.test(\"Salary = start_salary\", function () {\r",
							"    pm.expect(JSON.stringify(resp2data.start_qa_salary)).to.eql(salaryQA);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_6 = salary*2\", function () {\r",
							"    let qa_6_months = resp2data.qa_salary_after_6_months\r",
							"    let salary_QA = salaryQA*2\r",
							"    pm.expect(qa_6_months).to.eql(salary_QA);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_12 = salary*2.7\", function () {\r",
							"    let qa_12_months = resp2data.qa_salary_after_12_months\r",
							"    let salary_QA = salaryQA*2.7\r",
							"    pm.expect(qa_12_months).to.eql(salary_QA);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 1.5 = salary*3.3\", function () {\r",
							"    let salary_QA = salaryQA*3.3\r",
							"    pm.expect(resp2data['qa_salary_after_1.5_year']).to.eql(salary_QA);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 3.5 years = salary*3.8\", function () {\r",
							"    let salary_QA = salaryQA*3.8\r",
							"    pm.expect(resp2data['qa_salary_after_3.5_years']).to.eql(salary_QA);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary is the first element\", function () {\r",
							"    pm.expect(JSON.stringify(resp2data.person.u_name[1])).to.eql(salaryQA);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Age is equal to age\", function () {\r",
							"    let age2 = req2data.age\r",
							"    pm.expect(JSON.stringify(resp2data.person.u_age)).to.eql(age2);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 5 years = salary*4.2\", function () {\r",
							"    let salary5 = resp2data.person.u_salary_5_years\r",
							"    let salary_QA = salaryQA*4.2\r",
							"    pm.expect(salary5).to.eql(salary_QA);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"Object.keys(resp2data.person).forEach(key => {\r",
							"   let value = resp2data.person[key]\r",
							"    console.log(key, value)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//This is the first responce from server!\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}